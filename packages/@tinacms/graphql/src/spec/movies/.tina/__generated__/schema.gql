"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  movie(relativePath: String): Movie!
  movieConnection(before: String, after: String, first: Float, last: Float, sort: String): MovieConnection!
  director(relativePath: String): Director!
  directorConnection(before: String, after: String, first: Float, last: Float, sort: String): DirectorConnection!
  actor(relativePath: String): Actor!
  actorConnection(before: String, after: String, first: Float, last: Float, sort: String): ActorConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Movie | Director | Actor

union MovieDirector = Director

type Movie implements Node & Document {
  title: String
  releaseDate: String
  rating: Float
  archived: Boolean
  genre: String
  director: MovieDirector
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type MovieConnectionEdges {
  cursor: String!
  node: Movie
}

type MovieConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [MovieConnectionEdges]
}

type Director implements Node & Document {
  name: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type DirectorConnectionEdges {
  cursor: String!
  node: Director
}

type DirectorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DirectorConnectionEdges]
}

type Actor implements Node & Document {
  name: String
  body: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type ActorConnectionEdges {
  cursor: String!
  node: Actor
}

type ActorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ActorConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateMovie(relativePath: String!, params: MovieMutation!): Movie!
  createMovie(relativePath: String!, params: MovieMutation!): Movie!
  updateDirector(relativePath: String!, params: DirectorMutation!): Director!
  createDirector(relativePath: String!, params: DirectorMutation!): Director!
  updateActor(relativePath: String!, params: ActorMutation!): Actor!
  createActor(relativePath: String!, params: ActorMutation!): Actor!
}

input DocumentMutation {
  movie: MovieMutation
  director: DirectorMutation
  actor: ActorMutation
}

input MovieMutation {
  title: String
  releaseDate: String
  rating: Float
  archived: Boolean
  genre: String
  director: String
  body: JSON
}

input DirectorMutation {
  name: String
}

input ActorMutation {
  name: String
  body: String
}
